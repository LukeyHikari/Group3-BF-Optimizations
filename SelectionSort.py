# -*- coding: utf-8 -*-
"""SelectionSort_Optimized.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TabcQo91Dq29B1wFenRQoMDbnL7p_egt
"""

def traditional_selection_sort(arr):
    n = len(arr)
    output = arr.copy()
    passes = 0

    print("\nTraditional Selection Sort:")
    print("Initial Array:", arr)

    for i in range(n - 1):
        passes += 1
        min_index = i
        for j in range(i + 1, n):
            if output[j] < output[min_index]:
                min_index = j
        if min_index != i:
            output[i], output[min_index] = output[min_index], output[i]
        print(f"Pass {passes}: {output}")

    print(f"Total passes (Normal Selection Sort): {passes}\n")
    return output, passes


def optimized_selection_sort(arr): # Optimized Selection Sort/2Min Selection Sort, in each pass, It will selects the two lowest/minimum values from the unsorted portion.
    n = len(arr)
    output = arr.copy()
    passes = 0
    i = 0

    print("\nOptimized Selection Sort (Two Lowest Each Pass):")
    print("Initial Array:", arr)

    # Process two elements at a time || min1 and min2
    while i < n - 1:
        passes += 1
        if output[i] <= output[i + 1]:
            min1 = i
            min2 = i + 1
        else:
            min1 = i + 1
            min2 = i

        # Search for the smallest and second smallest in the unsorted portion
        for j in range(i + 2, n):
            if output[j] < output[min1]:
                min2 = min1
                min1 = j
            elif output[j] < output[min2]:
                min2 = j

        # Swapping the smallest element found into position i
        if min1 != i:
            output[i], output[min1] = output[min1], output[i]
            # Checking if the second smallest was originally at the position i, It will update its index after the swap
            if min2 == i:
                min2 = min1

        # Swapping the second smallest element found into position i+1
        if min2 != i + 1:
            output[i + 1], output[min2] = output[min2], output[i + 1]

        print(f"Pass {passes}: {output}")
        i += 2

    print(f"Total passes (Optimized Selection Sort): {passes}\n")
    return output, passes


user_input = input("Enter the array elements separated by comma: ")
arr = list(map(int, user_input.split(',')))


# Run Normal Selection Sort and Run Optimized Selection Sort
traditional_sorted, traditional_passes = traditional_selection_sort(arr)
optimized_sorted, optimized_passes = optimized_selection_sort(arr)

print("\nComparison Summary:")
print("Traditional Selection Sort Passes:", traditional_passes)
print("Optimized Selection Sort Passes:", optimized_passes)
print("\nFinal Sorted Array (Original Selection Sort):", traditional_sorted)
print("Final Sorted Array (Optimized Selection Sort):", optimized_sorted)